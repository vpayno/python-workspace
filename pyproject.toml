[project]
name = "python-workspace"
description = "Python workspace"
authors = [
    {name = "Victor Payno", email = "vpayno@users.noreply.github.com"},
]
maintainers = [
    {name = "Victor Payno", email = "vpayno@users.noreply.github.com"},
]
dependencies = [
    "rich>=13.7.0",
    "pyyaml>=6.0.1",
    "ruyaml>=0.91.0",
    "yamlfix>=1.16.0",
    "yamllint>=1.35.1",
    "toml>=0.10.2",
    "tomli>=2.0.1",
    "tomlkit>=0.12.4",
    "fastjsonschema>=2.19.1",
    "json5>=0.9.17",
    "jsonlint>=0.1",
    "jsonpickle>=3.0.3",
    "jsonpointer>=2.4",
    "jsonschema>=4.21.1",
    "jsonschema-lint>=0.1.0",
    "jsonschema-specifications>=2023.12.1",
    "orjson>=3.9.15",
    "python-json-logger>=2.0.7",
    "python-lsp-jsonrpc>=1.1.2",
    "types-jsonschema>=4.21.0.20240118",
    "ujson>=5.9.0",
    "starlette>=0.37.2",
    "uvicorn>=0.29.0",
    "asyncio>=3.4.3",
    "httpx>=0.27.0",
    "psycopg>=3.1.18",
    "pymongo>=4.7.0",
    "testcontainers>=4.4.0",
    "icecream>=2.1.3",
    "flask>=3.0.3",
]
requires-python = ">=3.12"
dynamic = ["version"]
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["python-workspace", "cli", "terminal"]

[project.urls]
"Homepage" = "https://github.com/vpayno/python-workspace"
"Bug Tracker" = "https://github.com/vpayno/python-workspace/issues"
"Repository" = "https://github.com/vpayno/python-workspace.git"
"Changelog" = "https://github.com/vpayno/python-workspace/releases"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pyright]
include = ["src", "test"]

[tool.ruff]
line-length = 120
indent-width = 4

[tool.ruff.lint]
# select = []
# ignore = []
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.mypy]
check_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality =true
warn_return_any = true

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
line_length = 120
skip_gitignore = true

[tool.bandit]
exclude_dirs = [".venv"]

[tool.bandit.assert_used]
skips = ["*/*_test.py", "*/test_*.py"]

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
dev = [
    "pytest>=8.1.2",
    "pytest-randomly",
    "pytest-datafiles",
    "pytest-cov",
    "mypy>=1.10.0",
    "mypy-extensions>=1.0.0",
    "pyright>=1.1.360",
    "refurb",
    "ruff>=0.4.2",
    "pylint",
    "bandit",
    "mkdocs",
    "pdoc3",
    "ruff-lsp>=0.0.53",
    "python-lsp-server>=1.11.0",
]

[tool.pdm.version]
source = "scm"
# write_to = "learn_toml/_version.py"
# write_template = "__version__ = '{}'"

[tool.pdm.scripts]
rich_main = { call = "learn_rich:main" }
rich_module = { shell = "python -m learn_rich" }
toml_main = { call = "learn_toml:main" }
toml_module = { shell = "python -m learn_toml" }
yaml_main = { call = "learn_yaml:main" }
yaml_module = { shell = "python -m learn_yaml" }
asgi_server = { call = "learn_asgi:server" }
asgi_client = { call = "learn_asgi:client" }
asgi_module = { shell = "python -m learn_asgi" }
enum_main = { call = "learn_enum:main" }
enum_module = { shell = "python -m learn_enum" }
asyncio_main = { call = "learn_asyncio:main" }
asyncio_module = { shell = "python -m learn_asyncio" }
flask_main = { call = "learn_flask:main" }
flask_module = { shell = "python -m learn_flask" }

clean_docs = { shell = "rm -rf html mkdocs pydoc pdoc" }
clean_pycache = { shell = "find . -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete" }
clean_build = { shell = "rm -rf dist" }
clean = { composite = ["clean_docs", "clean_pycache", "clean_build"] }

format = { shell = "ruff format" }

ci-ruff = { shell = "ruff check" }
ci-pylint = { shell = "pylint --ignore-patterns='_[a-z][a-z0-9_-]+.py' ./src ./test" }
ci-pyright = { shell = "pyright --stats" }
ci-refurb = { shell = "refurb ./src ./test" }
ci-bandit = { shell = "bandit --verbose --recursive --config ./pyproject.toml ." }
ci-mypy = { shell = "mypy --install-types --non-interactive ./src ./test" }
lint = { composite = ["ci-ruff", "ci-pyright", "ci-pylint", "ci-refurb", "ci-mypy"] }

doctest = { shell = "python -m doctest -v ./src/*/[a-z]*.py" }
pytest = { shell = "pytest --verbose --cov=. --cov-branch --cov-report=term-missing --cov-report=xml:.coverage.xml -p no:randomly ./test" }
coverage_report = { shell = "coverage report --show-missing" }
coverage_annotate = { shell = "coverage annotate" }
test = { composite = ["doctest", "pytest"] }

pydoc_text = { shell = "mkdir pydoc; for d in $(ls src/); do python -m pydoc ${d} | tee ./pydoc/${d}.txt; done" }
pydoc_html = { shell = "mkdir pydoc; for d in $(ls src/); do python -m pydoc -w ${d}; mv ${d}.html ./pydoc; done" }
pdoc_html = { shell = "PYTHONPATH=src pdoc --html --force --output-dir ./pdoc ." }
mkdocs = { shell = "mkdocs new mkdocs && cd mkdocs && echo theme: readthedocs >> mkdocs.yml && yq --yaml-output . mkdocs.yml | sponge mkdocs.yml && mkdocs build" }
doc = { composite = ["pydoc_text", "pydoc_html", "pdoc_html", "mkdocs"] }

end = { shell = 'printf "\nFinished running pdm run full\n\n"' }

full = { composite = ["clean", "format", "lint", "test", "doc", "end"] }

[project.scripts]
learn_rich = "learn_rich.main:main"
learn_toml = "learn_toml.main:main"
learn_yaml = "learn_yaml.main:main"
learn_asgi_server = "learn_asgi.server:main"
learn_asgi_client = "learn_asgi.client:main"
learn_enum = "learn_enum.main:main"
learn_asyncio = "learn_asyncio.main:main"
learn_flask = "learn_flask.main:main"
